# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18teR1V62GcaKaIC0K9Ua8-o_JYxo0Ite

# **Matter Solubility**

# **Load Dataset**
"""

import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/delaney_solubility_with_descriptors.csv')

"""# **Data Prepping**

## **Separating X and y data**
"""

y = df['logS']
X = df.drop('logS', axis=1)

"""## **Splitting data for training and testing**"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)

"""# **Model building**

## **Linear Regression**

### Training the model
"""

from sklearn.linear_model import LinearRegression

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

"""### Applying model for prediction"""

y_lr_model_test_pred = lr_model.predict(X_test)
y_lr_model_train_pred = lr_model.predict(X_train)

"""### Evaluate model performance"""

from sklearn.metrics import mean_squared_error, r2_score

lr_model_train_mse = mean_squared_error(y_train, y_lr_model_train_pred)
lr_model_train_r2 = r2_score(y_train, y_lr_model_train_pred)

lr_model_test_mse = mean_squared_error(y_test, y_lr_model_test_pred)
lr_model_test_r2 = r2_score(y_test, y_lr_model_test_pred)

lr_results = pd.DataFrame(['Linear Regression', lr_model_test_mse, lr_model_test_r2, lr_model_train_mse,lr_model_train_r2]).transpose()
lr_results.columns = ['Model', 'Test MSE', 'Test R2', 'Train MSE', 'Train R2']
lr_results

"""## **Random Forest**

### Training the model
"""

from sklearn.ensemble import RandomForestRegressor

rf_model = RandomForestRegressor(max_depth=2, random_state=100)
rf_model.fit(X_train, y_train)

"""### Applying model for prediction"""

y_rf_model_test_pred = rf_model.predict(X_test)
y_rf_model_train_pred = rf_model.predict(X_train)

"""### Evaluate model performance"""

from sklearn.metrics import mean_squared_error, r2_score

rf_model_train_mse = mean_squared_error(y_train, y_rf_model_train_pred)
rf_model_train_r2 = r2_score(y_train, y_rf_model_train_pred)

rf_model_test_mse = mean_squared_error(y_test, y_rf_model_test_pred)
rf_model_test_r2 = r2_score(y_test, y_rf_model_test_pred)

rf_results = pd.DataFrame(['Linear Regression', rf_model_test_mse, rf_model_test_r2, rf_model_train_mse, rf_model_train_r2]).transpose()
rf_results.columns = ['Model', 'Test MSE', 'Test R2', 'Train MSE', 'Train R2']
rf_results

"""## **Model Comparison**"""

df_models = pd.concat([lr_results, rf_results], axis=0).reset_index(drop=True)
df_models

"""# **Data Model Visualization**"""

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(5,5))
plt.scatter(x=y_train, y=y_lr_model_train_pred, alpha=0.4)

z = np.polyfit(y_train, y_lr_model_train_pred, 1)
p = np.poly1d(z)

plt.plot(y_train, p(y_train), '#F8766D')
plt.ylabel('Predict logS')
plt.xlabel('Experiment logS')